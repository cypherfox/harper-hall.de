<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering on Harper Hall</title><link>https://harper-hall.de/categories/software-engineering/</link><description>Recent content in Software Engineering on Harper Hall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://harper-hall.de/categories/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Introducing the Three Holy Grails</title><link>https://harper-hall.de/post/2021-10-introducing-the-three-grails/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://harper-hall.de/post/2021-10-introducing-the-three-grails/</guid><description>I have finally taken the time get my thoughts organized and point some points together, about how I think cloud-native systems should be build: [The Three Holy Grails of DevOps]({{{ relref &amp;ldquo;/pages/the-holy-grails-of-dev-ops&amp;rdquo; }}}).
Practically none of the points made are new or revolutionary. Quite to the contrary, I am still searching for publications that support the individual corollaries where they are missing today.
Therefore please take this document less as a revelation, and more as a personal manifest how I think cloud-native systems should be designed and how an organization should structure itself around that system to reach high levels of efficiency in continuously develop and maintain that system.</description></item><item><title>The Three Holy Grails of DevOps</title><link>https://harper-hall.de/pages/the-holy-grails-of-dev-ops/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://harper-hall.de/pages/the-holy-grails-of-dev-ops/</guid><description>Establishing DevOps is a change in culture. It is all about trust, personal empowerment and cooperating on a larger goal.
There is neither such a thing as a DevOps-Engineer nor a DevOps team (and neither is there a Full-Stack Developer, but that is a story for another day).
But there are technical and organizational steps that help to improve the effectiveness of your organization and the quality of the services you provide.</description></item><item><title>Books of Interest</title><link>https://harper-hall.de/pages/books/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://harper-hall.de/pages/books/</guid><description>Books of interest I think that everybody who designs software systems or manages people who in turn design software software system should have read most or all of these books. I have repeatedly experience people ignoring the lessens taught by the authors of these books, sometimes even decades after publications.
The books are in order of original publication, not order of preference. Especially the books (co-)written by Gene Kim make a lot more sense when read in the order of publication.</description></item><item><title>Unified Development Platform - Lightening the Mental Load</title><link>https://harper-hall.de/post/2021-04-lightening-the-load-unified-platform/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://harper-hall.de/post/2021-04-lightening-the-load-unified-platform/</guid><description>About a year ago I was musing with a few colleagues about the next big development in Software Engineering. My expectation was the &amp;ldquo;single unified monolith&amp;rdquo; that most team would be migrating back to. The voices saying that cloud offerings, and Kubernetes in particular, are much too complex where getting louder and louder.
At the time I did not write about it, as I had no idea, what form this monolith of serenity would take, or I would come from.</description></item><item><title>Efficient Development Checklist</title><link>https://harper-hall.de/post/2006-06-efficient-development-checklist/</link><pubDate>Sat, 03 Jun 2006 00:00:00 +0000</pubDate><guid>https://harper-hall.de/post/2006-06-efficient-development-checklist/</guid><description>From a discussion with a few colleagues, I was assured of the impression, that while, allmost everybody in software developments knows three things: a) the process (what process?) in most organisations is broken and b) everybody has heard that other, larger better organisations use modern methods (”Oh, that, yes I read about &amp;lt;fortune 500 company&amp;gt; is doin’ it.”) and nobody is using it themselfs, for various reasons. Myself included.
There are a number of small things that you can introduce piece by piece into your development process and see if they work.</description></item><item><title>Things of Interest</title><link>https://harper-hall.de/pages/things-of-interest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://harper-hall.de/pages/things-of-interest/</guid><description>Things of (my) Interest This is a curated list of links on topics that I am interested in. I try to keep it up to day in irregular intervals.
Architecture Wardley Maps Arc42 Arc42 Template Overview a set of documentation templates that help you organize information and process on designing software architectures.
Software Development [https://www.youtube.com/c/ContinuousDelivery/videos](Continous Delivery): Youtube Channel of Dave Farley, Co-Author of &amp;ldquo;Continous Delivery&amp;rdquo;. Insightful content on all things software development process.</description></item></channel></rss>