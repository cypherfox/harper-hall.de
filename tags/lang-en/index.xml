<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lang-en on Harper Hall</title><link>https://harper-hall.de/tags/lang-en/</link><description>Recent content in lang-en on Harper Hall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://harper-hall.de/tags/lang-en/index.xml" rel="self" type="application/rss+xml"/><item><title>Unified Development Platform - Lightening the Mental Load</title><link>https://harper-hall.de/post/2021-04-lightening-the-load-unified-platform/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://harper-hall.de/post/2021-04-lightening-the-load-unified-platform/</guid><description>About a year ago I was musing with a few colleagues about the next big development in Software Engineering. My expectation was the &amp;ldquo;single unified monolith&amp;rdquo; that most team would be migrating back to. The voices saying that cloud offerings, and Kubernetes in particular, are much too complex where getting louder and louder.
At the time I did not write about it, as I had no idea, what form this monolith of serenity would take, or I would come from.</description></item><item><title>Efficient Development Checklist</title><link>https://harper-hall.de/post/2006-06-efficient-development-checklist/</link><pubDate>Sat, 03 Jun 2006 00:00:00 +0000</pubDate><guid>https://harper-hall.de/post/2006-06-efficient-development-checklist/</guid><description>From a discussion with a few colleagues, I was assured of the impression, that while, allmost everybody in software developments knows three things: a) the process (what process?) in most organisations is broken and b) everybody has heard that other, larger better organisations use modern methods (”Oh, that, yes I read about &amp;lt;fortune 500 company&amp;gt; is doin’ it.”) and nobody is using it themselfs, for various reasons. Myself included.
There are a number of small things that you can introduce piece by piece into your development process and see if they work.</description></item><item><title>The Server War</title><link>https://harper-hall.de/post/2005-12-the-server-war/</link><pubDate>Fri, 02 Dec 2005 00:00:00 +0000</pubDate><guid>https://harper-hall.de/post/2005-12-the-server-war/</guid><description>For the last few years Microsoft Server Software and Linux Products have not realy been competing very much. Both sides where too busy gobbling up the large chunks of market real-estate that where left dormant by makers of large scale servers, who where unable to offer efficient and easy to use entry-level servers. Also the market for those entry class servers was growing and this class of servers was continuosly moving onto higher and higher ground as the performance parameters of off-the-shelf PCs grew in leaps and bounds.</description></item><item><title>Getting back control of information dissemination</title><link>https://harper-hall.de/post/2005-12-getting-back-control-of-information-dissemination/</link><pubDate>Thu, 01 Dec 2005 00:00:00 +0000</pubDate><guid>https://harper-hall.de/post/2005-12-getting-back-control-of-information-dissemination/</guid><description>In a recent Op-Ed piece John Seigenthaler Sr., lets us know about his understandable dissattisfaction with the contents of the Wikipedia entry about his person. He rants about the inability of legal discourse against libelous writers and prophecies a dark future where everybody can say what he wants to say.
I completely agree with Mr. Seigenthaler that libelous content anywhere should answer to legal discourse. His further actions document that, while difficult in the maze of participants (the service provider wikipedia, the ISP of the original writer, BellSouth, and the yet unkown original author of the ‘pedia entry), he can file a suit agains John Doe and persue due course of the law to take the perpetrator to task.</description></item></channel></rss>